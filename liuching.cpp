#include <iostream>
#include <fstream>
#include <cstring>
#include <algorithm>
#include <array>
#include <vector>
#include <utility>
#include <cstdlib>
#include <ctime>
#include <set>
using namespace std;

int value_table[8][8]
{
	{5, -2, 3, 2, 2, 3, -2, 5},
	{-2, -5, 3, 2, 2, 3, -5, -2},
	{3, 3, 2, 2, 2, 2, 3, 3},
	{2, 2, 2, 2, 2, 2, 2, 2},
	{2, 2, 2, 2, 2, 2, 2, 2},
	{3, 3, 2, 2, 2, 2, 3, 3},
	{-2, -5, 3, 2, 2, 3, -5, -2},
	{5, -2, 3, 2, 2, 3, -2, 5},
};

// ███████████████████████████████▀█░░░░░░░█▀▀░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▀▀█████▌███▀▀███████▐███████████▌
// █████████████████████████████▀░░▐▌░░▄▄▄█░░░░░░░░░░▀██░░░░░░░░▄████▄▄▄▄▄███████▄▄▄▄▄▄▄▄██████▄███████▀███████████▌
// ███████████████████████████▀░░░░░█▄▄█▀▀░░░░░░▄▄██▀▀▀▀░░░▄▄▄▀▀██████████████████████████▀███▀███████▌▐███░███████▌
// ██████████████████████████▄░▀░░░▄██░░░░░░▄░▄█▀▀░░░▄▄▄█████░░░▀█████████████████████████░██▌░▐████▐█░▐███░▐██████▌
// ████████████████████████░░█▄░░░░▀░█▄░░░▄█▀░░░░░▄▄██▀░▀████░░░░░████████████████████████▄██░░█████▐█░███▌░▀█▄████▌
// ██████████████████████░█░░▀█░░▄░░░░█░█▀░░░░▄▄██▌███░░░▀██▌░░░░░████████████████████████▐██░░████▌▐▀░███░░░░█████▌
// ████████████████████▀░░▀█░▄▐█░▀▄░░░▀▌░░▄▄███████░██▌░░░███░░░░░░█████████████████▐█████▐█▌░░████▌█░░███░░░░█████▌
// ██████████████████▀░░░░░▐█▀░█▄░▐░░░░█▄██████████░▀██░░░▐██░░░░░░█████████████████▐█████▐█▌░░████░▀░░███░░░░█████▌
// █████████████████░░░░░░░░█████▄░█▄██████████████▄░▐█▄░░░██▌░░░░░████████████████▀██████▐█░░▐████░░░▐██▌░░░░█████
// ███████████████▀░░░░░░░░▄██▄▄▀█▄█████████████████░▀█▌░░░▐█▌░░░░░░▄▀█████▀▀▀▀▀▀▀▀▀▀▀████▄█░░▐███▌░░░▐██░░░░▐████▌
// ██████████████▀░░░░░░░▄█▀░░█▄████████████████████▌░▐█░░░░██░░░▄▄█▀▀▀░░░░░░░░░░░░░░░░░░░▀▀█▄████▀░░░▐█▌░░░░▐████
// █████████████░░░░░░░▄█▀░░▄▄██████████████████████░░░█▌░░░██████░░░░░░░░░░░░░░░░░░░░░░░░░░░░▀███▀░░░▐█▀░░░░████▀
// ███████████▀░░░░░▄█▀░░░▄█████████████████████████▌░░▐█░▄▄███████▄░░░▄▄█████▌░░░░░░░░░░░░░░░░░░▀▄▄░▄██░░░░░████
// ██████████░░░░▄▄▀▀░░░▄███████████████████████████▌░░▀▄█▀░██████████████████▀░░░▄░▐░░░░░░░░░░░░░░▀▄▄█▌░░░░▐███▀
// ████████▀░░▄▄▄█░░░▄████████████████████████████▐███▄█▀░▄██████████████████▀░░░░▌░▐░░░░░░░░░░░░░░░░██░░░░░████
// ███████▀░░▀▀░░░░▄████████████▀█████████████████▌█▌██░░████████████████████▌░░░▐▀░█░░░░░░░░░░░░░░░░▄██░░░░███▀
// ▀█████▄▄▄▄░░░░▄██▄░█████▄█████░███████████████████▀░▄█░▀▀█▀▀███░░░▀▀██████▌░░░█░▄█░░░░░░░░░░░░░░░░▐▀▀█░░░██▌
// ░░███▀█▄░█░▄▄█████▄░█████▄▀█▀▀▄░█▀███████████████▀░▄█░░░░░░░█▌░░░░░░░░░░██▀░░▐▀░██░░▄▄░░░░░░░░░░░░█░░▀█░▐██
// ░█▌░▀█░█▄▀█████████▄░▐████▄▀▀░░░░▀██████████████▀░░█░░░░░░░░█░░░░░░░░░░██▀░░▄█░███░░▐▌░░░░░░░░░░░▐▌░░░▀███▌
// █▀█▄░▀█░▀░█▐████████▌░▀████░░░░░░░▀▀██▄▐██░███▀█░░▐▀░░░░░░░▐▀░░░░░░░░▄██▀░░▄█▄██▐██░█▌░░░░░░░░░░░█░░░░░▀██
// █▄░▀█░░░░░▀█▀█████████░▀████░░░░░░░░▀██▄▐████░░░░▄▌░░░░░▄░░░░░░░░░░░░▀░▀░░▄█▄██▀▀█▌░█▌░░░░░░░░░░░▌░░░░░░▐▌
// ██▄░░░░░░░▄█░▀████████▄░░████░░░░░░░░▀██░███░░░░░▀▌░░░░░▀▄░░░░░░░░░░░░░░░▄▄█▀▀░░░██▐█▌░░░░░░░░░░▐▀░░░░░▄░█
// ██▌░░░░░░░███▄▀████████▄░░███▄░░░░░░░░▀█▌▐█▄░░░░░░▌░░░░░░▀█▄░░░░░░░░░░░▀▀▀░░░░░░░▐███░░░░░░░░░░░█░▄░░░░█░▐▄
// ▀█▌░░░░░░▐████▄░▀███████░░░▀██░░░░░░░░░░██▀▌░░░░▄░█░░░░░░░░▀░░░░░░░░░░░░░░░░▄▄██▀░███░░░░░░░░░░░▌░▌░░░░▐░▀▌
// ░▀▌░░░░░░▐▄▀███▄░▀███▄███░░░▀██░░░░░░░░░██░▐▄░░░▌░▐░▄▄▄▄▄░░░░░░░░░░░░░░░▄▄██▀▀░░░░██▌░░░░░░░░░░▐░░█░░░░▀▌░▌
// █░█░░░░░░░▀▀▄████░░███▄▀▀▄░░░▀█░░░░░░░░▐▀░▀░█░▄█▌░▐▄░░▀▀███▄▄░░░░░░░░░▄███▄▄▄▄▄▄░░██▀░░░░░░░░░░▄░░█░░░░░█░▌
// ▐███░░░░░░░░▀█████▄░▀██▄░░░░░░░░░░░░░░░█░░░░▀███▌░▀▌▄▄███▀▀▀░░▄░░░░░░░░░░▀▀▀▀▀▀▀░░▐█░░░░░░░░░░░▀░▄█▌░░░░▐░▌
// █████▄░░░░░░░░▀▀███▄░▀██▄░░░░░░░░░░░░░▐▀░░░░████▀░▄▌▀▀░░░░░░░░▀░░░░░░░░░░░░░░░░░░░▐▌░░░░░░░░░░░░░███░░░░▀▌▌
// ███▌░▀█▄░░░░░░░░░▀██░░▀██▄░░░░░░░░░░░░█░░░░█████░░█▀░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░▄████░░░░░█▌
// ███▌░░░▀█░░░░░░░░░░▀█▄▄░▀█▄░░░░░░░░░░░▌░░░▄████▌░▄▌░░░░░░░░░░░░░░░▄▄░░░░░░░░░░░░░▄▌░░░░░░░░░░░▄█████▌░░░░▀█
// ███▌░░░░▀█▄░░░░░░░░░░░▀▀███▄░░░░░░░░░▐▌░░▄█████▀░█░░░░░░░░░░░░▄▄▄▄█░░░░░░░░░░░░░░█░░░░░░░░░░░████████░░░░░█
// ▀███░░░░░░█▄░░░░░░░░░░░░░░▀▀█▄▄░░░░░░▐▌░░█████▌░░▐▄░░░░░░░░░░▀▀░░▐░░░░░░░░░░░░░░█▀░░░░░░░░░▄█████████▌░░░░▐▌
// ░░░▀█░░░░░░▀█▄░░░░░░░░░░░░░░░░▀▀▄▄▄░░▐▌░▐█████░░░▄█▄░░░░░░░░░░░░░░░░░░░░░░░░░░░▐▀░░░░░░░░▄████████████▄░░░░█
// ░░░░▀█░░░░░░░▀▄░░░░░░░░░░░░░░░░░░░▀▀█▄█░█████▀░░▄███▄░░░░░░░░░░░░░░░░░░░░░░░░░█▀░░░░░░░░▄██████████████░░░░▀▌
// ░░░░░░█▄░░░░░░░█▄░░░░░░░░░░░░░░░░░░░░░▀▀████▀░░███████▄░░░░░░░░░░▄▄▄██▄▄▄▄▄░▄█▀░░░░░░▄█████████████████░░░░░█
// ░░░░░░░█▄░░░░░░░▀█▄░░░░░░░░░░░░░░░░░░░░░░▀▀█▄▄██████████░░░░░░░░▄█████▄░░██▀▀█▄▄▄▄▄▄███████████████████▌░░░░▀▄
// █▄░░░░░░▀█░░░░░░░░▀▀▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██████░░█▄░░░▀▀█▄░░░▀▀█▄▀█████████████░░░░░█
// ███▄░░░░░▀█▄░░░░░░░░░▀█▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████░░█░░░░░░░░░░░░░░██████████████░░█░░▐▄
// ░░▀█▄░░░░░░█▄░░░░░░░░░░▀█▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐█████▌░░▀░░░░░░░░░░░░░░█████████████▄░▐▄░░▌
// ░░░░░░░░░░░░▀█░░░░░░░░░░░▀▀█▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐██████░░▄░░░░░░░░░░░░░░░████████████▌░▀▌░░▌
// ░░░░░░░░░░░░░░█▄░░░░░░░░░░░░▀▀█▄▄▄▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐██████░░█░░░░░░░░░░░░░░░▀███████████▌░░█░░▌
// ░░░░░░░░░░░░░░░▀█░░░░░░░░░░░░░░░░░▀█▀▀█▄▄▄▄▄░░░░░░░░░░░░░░░░░░░░░░░██████▀░▄▀░░░░░░░░░░░░░░░░███████████▀░░▐░░▌
// ░░░░░░░░░░░░░░░░░▀█▄▄░░░░░░░░░░░░░██░▄██████▀▀▀██▄▄▄▄▄░░░░░░░░░░░░███████▄▄█░░░░▄░░░░░░░░░▄▄░▐██████████░░░▐░▄▀
// ██░░░░░░░░░░░░░░░░░░▀▀█▄▄░░░░░░░▄███░███████▌▀▄███▀░░▀▀▀████▄▄▄▄▄███████▐██▌▀▀▀░▄▀▀▀▄░░░█▄▄██▐█████████▌░░░█░█
// ░▀██▄░░░░░░░░░░░░░░░░░░░▀▀█▄░░▄████████████▀█▄▄█▀░░░░░░▐███▀▀░░░░██████▀████▄▀█░▀░░░▀██▄░░░░▀██████████▌░░░▌▐▀
// ░░░▀▀█▄░░░░░░░░░░░░░░░░░░░░░▀▀████████▄███▌▄█▐▀▄▄▄▄▄▄▄░▐█▀░░░░░░░░▀████████████▀▀▀▀▀▀██▀░░░░▄██████████░░░▐█▌
// ░░░░░░▀██▄░░░░░░░░░░░░░░░░░░░░█▀███░▐▌█▀███▀▐██████████████████████████████████████████▄▄▄▄▄██████████▌░░▄██
// ░░░░░░░░▀▀█▄░░░░░░░░░░░░░░░░░▐███▀█▄▄█▀░██▀███████████████████████████████████████████████████████████░░▄█▀
// █▄▄░░░░░░░░▀▀░░░░░░░░░░░░░░░░▀██████▄█▄▄▐████████████████████████████████████████████████████████████▌░▄█
// ░▀▀█▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▀▀██████████████████████████████████████████████████████████████▄█▀
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐████████████████████████████████████████████████████████████▀
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄██████████████████████████████████████████████████████████▀▀
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄██████████████████████████████████████████████████████████▀
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄██▀░░██████████████████████████████████████████████████████
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐█▀▄▄▄▄█████████████████████████████████████████████████░▐██
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄▄███████████████████████████████████████████████████████▌░▐█
// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀░░▀▀

struct Point {
    int x, y;
	Point(int a, int b) : x(a) , y(b) {}
	
	void operator+=(Point& source)
	{
		this->x += source.x;
		this->y += source.y;
	}
};

const int SIZE = 8;
using arr = std::array< std::array<int, SIZE>, SIZE >;
using pai = std::pair<Point, int>;

int player;
arr board;
std::vector<Point> next_valid_spots;

int cal(const arr& source, int player)
{
	ofstream out;
	out.open("test.txt");
	
	int count = 0;
	
	bool survive[SIZE][SIZE];
	int number = 0;
	memset(survive, 0, sizeof(survive));
	
	int c[2][4] = {{0, 0, SIZE-1, SIZE-1}, {SIZE-1, 0, SIZE-1, 0}};
	for (int i = 0; i < 4; i++)
		if (source[c[0][i]][c[1][i]] == player)
			survive[c[0][i]][c[i][i]] = true;
		
	for (int i = 0; i < SIZE; i++)
	{
		
		for (int k = 0; k < SIZE; k++)
		{
			if (source[i][k] != player)
				continue;
			if (!i and !k)
				continue;
			
			bool good = true;
			
			if (i-1 >= 0 and !survive[i-1][k])
				good = false;
			if (k-1 >= 0 and !survive[i][k-1])
				good = false;
			
			if (good)
				survive[i][k] = true;
		}
		
		for (int k = SIZE-1; k >= 0; k--)
		{
			if (source[i][k] != player)
				continue;
			if (!i and k == SIZE-1)
				continue;
			
			bool good = true;
			
			if (i-1 >= 0 and !survive[i-1][k])
				good = false;
			if (k+1 < SIZE and !survive[i][k+1])
				good = false;
			
			if (good)
				survive[i][k] = true;
		}
	}

	for (int i = SIZE-1; i >= 0; i--)
	{
		for (int k = 0; k < SIZE; k++)
		{
			if (source[i][k] != player)
				continue;
			if (i == SIZE-1 and !k)
				continue;
			
			bool good = true;
			
			if (i+1 < SIZE and !survive[i+1][k])
				good = false;
			if (k-1 >= 0 and !survive[i][k-1])
				good = false;
			
			if (good)
				survive[i][k] = true;
		}
			
		
		for (int k = SIZE-1; k >= 0; k--) 
		{
			if (source[i][k] != player)
				continue;
			if (i == SIZE-1 and k == SIZE-1)
				continue;
			
			bool good = true;
			
			if (i+1 < SIZE and !survive[i+1][k])
				good = false;
			if (k+1 < SIZE and !survive[i][k+1])
				good = false;
			
			if (good)
				survive[i][k] = true;
		}
	}
	
	for (int i = 0; i < SIZE; i++)
	{
		for (int k = 0; k < SIZE; k++)
			cout << source[i][k] << ' ';
		cout << endl;
	}
	
	cout << "---->" << endl;
	
	for (int i = 0; i < SIZE; i++)
	{
		for (int k = 0; k < SIZE; k++)
		{
			cout << survive[i][k] << ' ';
			if (survive[i][k])
				number++;
		}
		cout << endl;
	}	
	count += number * 10;
	
	for (int i = 0; i < SIZE; i++)
		for (int k = 0; k < SIZE; k++)
			if (source[i][k] == player)
				count += value_table[i][k];
			
	return count;
}

void read_board(std::ifstream& fin) {
    fin >> player;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            fin >> board[i][j];
        }
    }
}

void read_valid_spots(std::ifstream& fin) {
    int n_valid_spots;
    fin >> n_valid_spots;
    int x, y;
    for (int i = 0; i < n_valid_spots; i++) {
        fin >> x >> y;
        next_valid_spots.push_back({x, y});
    }
}

Point dir[8] = {
	Point(0, 1),
	Point(1, 1),
	Point(1, 0),
	Point(1, -1),
	Point(0, -1),
	Point(-1, -1),
	Point(-1, 0),
	Point(-1, 1)
};

inline bool inside_board(int x, int y) {
	return (x >= 0 and x < SIZE and y >= 0 and y < SIZE);
}

vector<Point> find_valid(arr state, int player)
{
	vector<Point> tmp;
	
	for (int i = 0; i < SIZE; i++)
		for (int k = 0; k < SIZE; k++)
		{
			if (state[i][k])
				continue;
			
			for (int m = 0; m < 8; m++)
			{
				bool good = false;
				int curi = i+dir[m].x, curk = k+dir[m].y;
				
				if (inside_board(curi, curk) and state[curi][curk] + player == 3)
				{
					while (inside_board(curi, curk) and state[curi][curk])
					{
						if (state[curi][curk] == player)
						{
							tmp.push_back(Point(i, k));
							
							good = true;
							break;
						}
						
						curi += dir[m].x;
						curk += dir[m].y;
					}
					
					if (good)
						break;
				}
			}
		}
		
	return tmp;
}

pai dfs(int step, arr state, int alpha, int beta, bool Max, int player)
{
	if (step--)
	{
		pai ret = make_pair(Point(-1, -1), ((Max) ? -1e9 : 1e9));
		
		vector<Point> valid_location = find_valid(state, player);
		
		for (auto i : valid_location)
		{
			arr next_state = state;
			
			if (!inside_board(i.x, i.y))
			{
				std::cout << "ERROR! (" << i.x << ", " << i.y << ") is not in the board!\n";
				return ret;
			}
			if (state[i.x][i.y])
			{
				std::cout << "ERROR! Put on (" << i.x << ", " << i.y << ") but there has the value " << state[i.x][i.y] << "!\n";
				return ret;
			}
			
			next_state[i.x][i.y] = player;
			pai v = dfs(step, next_state, alpha, beta, !Max, !player);
			
			if (Max)
			{
				alpha = max(alpha, v.second);
				ret = (v.second > ret.second) ? v : ret;
				ret.first.x = i.x;
				ret.first.y = i.y;
			}
			else
			{
				beta = min(beta, v.second);
				ret = (v.second < ret.second) ? v : ret;
				ret.first.x = i.x;
				ret.first.y = i.y;
			}
			
			// modifying alpha and beta.
			
		}
		
		return ret;
	}
	else
		return make_pair(Point(-1, -1), cal(state, player));
}

void write_valid_spot(std::ofstream& fout) {
	ofstream out;
	out.open("test.txt");
    // Point p = next_valid_spots[index];
    // Remember to flush the output to ensure the last action is written to file.
	
	int steps = 1;
	// while (true)
	{
		
		pai tmp = dfs(steps, board, 1e9, -1e9, true, player);
		
		fout << tmp.first.x << " " << tmp.first.y << std::endl;
		fout.flush();
		out << tmp.first.x << ' ' << tmp.first.y << ' ' << std::endl;
		out.flush();
		
		// steps += 2;
	}
	
	out.close();
}

int main(int, char** argv) {
    std::ifstream fin(argv[1]);
    std::ofstream fout(argv[2]);
    read_board(fin);
    read_valid_spots(fin);
    write_valid_spot(fout);
    fin.close();
    fout.close();
    return 0;
}
